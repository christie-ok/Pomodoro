{"version":3,"sources":["utils/duration/index.js","pomodoro/TimerAdjust.js","utils/class-names/index.js","pomodoro/SessionTitles.js","pomodoro/Countdown.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","TimerAdjust","classNameToBoolean","isTimerRunning","session","playPause","focusMinusClickHandler","breakMinusClickHandler","focusPlusClickHandler","breakPlusClickHandler","stopClickHandler","className","data-testid","focusDuration","type","onClick","disabled","label","breakDuration","role","aria-label","title","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","SessionTitles","timerText","givenSeconds","seconds","round","secondsToDuration","timeRemaining","hidden","Countdown","progressBar","secondsRemaining","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","nextTick","prevState","max","Pomodoro","initialSession","useState","setIsTimerRunning","setSession","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","nextState","min","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe6d492a.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  if (givenMinutes === null) return null;\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n\n","import React from \"react\";\nimport classNames from \"../utils/class-names\";\nimport {minutesToDuration} from \"../utils/duration/index.js\"\nimport PropTypes from 'prop-types';\n\nfunction TimerAdjust({isTimerRunning, session, playPause, focusMinusClickHandler, breakMinusClickHandler, focusPlusClickHandler, breakPlusClickHandler, stopClickHandler}) {\n\n    return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-focus\" >\n              {/* TODO: Update this text to display the current focus session duration */}\n              Focus Duration: {minutesToDuration(session.focusDuration)}\n            </span>\n            <div className=\"input-group-append\">\n              {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"decrease-focus\"\n                onClick={focusMinusClickHandler}\n                disabled = {session.label}\n              >\n                <span className=\"oi oi-minus\" />\n              </button>\n              {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"increase-focus\"\n                onClick={focusPlusClickHandler}\n                disabled={session.label}\n              >\n                <span className=\"oi oi-plus\" />\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* DONE: Update this text to display the current break session duration */}\n                Break Duration: {minutesToDuration(session.breakDuration)}\n              </span>\n              <div className=\"input-group-append\">\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"decrease-break\"\n                  onClick={breakMinusClickHandler}\n                  disabled={session.label}\n                >\n                  <span className=\"oi oi-minus\" />\n                </button>\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"increase-break\"\n                  onClick={breakPlusClickHandler}\n                  disabled={session.label}\n                >\n                  <span className=\"oi oi-plus\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* TODO: Disable the stop button when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"stop\"\n              title=\"Stop the session\"\n              onClick={stopClickHandler}\n              disabled={!session.label}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n    )\n}\n\nTimerAdjust.propTypes = {\n  isTimerRunning: PropTypes.bool,\n  session: PropTypes.object,\n  playPause: PropTypes.func,\n  focusMinusClickHandler: PropTypes.func,\n  breakMinusClickHandler: PropTypes.func,\n  focusPlusClickHandler: PropTypes.func,\n  breakPlusClickHandler: PropTypes.func,\n  stopClickHandler: PropTypes.func,\n}\n\nexport default TimerAdjust;","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React from \"react\";\nimport {secondsToDuration, minutesToDuration} from \"../utils/duration/index.js\"\nimport PropTypes from 'prop-types';\n\nfunction SessionTitles({session, timerText, isTimerRunning}) {\n  if (!session.label) return null;\n  return (\n    <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n        <h2 data-testid=\"session-title\">\n          {session.label} for {minutesToDuration(timerText)} minutes\n        </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n        <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(session.timeRemaining)} remaining\n            </p>\n            <p hidden={!(session && !isTimerRunning)}>PAUSED</p>\n          </div>\n    )\n}\n\nSessionTitles.propTypes = {\n  session: PropTypes.object,\n  timerText: PropTypes.number,\n  isTimerRunning: PropTypes.bool,\n}\n\nexport default SessionTitles;","import React from \"react\";\nimport SessionTitles from \"./SessionTitles\";\nimport PropTypes from 'prop-types';\n\nfunction Countdown({session, isTimerRunning}) {\n\n    const timerText = (session.label === \"Focusing\") ? session.focusDuration : session.breakDuration;\n\n    const progressBar = (secondsRemaining) => {\n        if (session.label === \"Focusing\") {\n          const secondsElapsed = session.focusDuration*60 - secondsRemaining;\n          const percentFill = secondsElapsed/(session.focusDuration*60)\n          return percentFill*100;\n        }\n         const secondsElapsed = session.breakDuration*60-secondsRemaining;\n         const percentFill = secondsElapsed/(session.breakDuration*60);\n         return percentFill*100;\n      }\n\n    return (\n    <div hidden={!session.label}>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <SessionTitles session={session} timerText={timerText} isTimerRunning={isTimerRunning} />\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow= {progressBar(session.timeRemaining)} // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${progressBar(session.timeRemaining)}%` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n}\n\nCountdown.propTypes = {\n  session: PropTypes.object,\n  isTimerRunning: PropTypes.bool,\n}\n\nexport default Countdown;","import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport TimerAdjust from \"./TimerAdjust\"\nimport Countdown from \"./Countdown\"\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(session) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        ...session,\n        label: \"On Break\",\n        timeRemaining: session.breakDuration * 60,\n      };\n    }\n    return {\n      ...session,\n      label: \"Focusing\",\n      timeRemaining: session.focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n\n  const initialSession = {\n    label: null,\n    timeRemaining: null,\n    focusDuration: 25,\n    breakDuration: 5,\n  };\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState({...initialSession});\n\n    // ToDo: Allow the user to adjust the focus and break duration.\n\n  \n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n   useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(session));\n    }\n    return setSession(nextTick);\n  },\n  isTimerRunning ? 1000 : null\n);\n\n/**\n * Called whenever the play/pause button is clicked.\n */\nfunction playPause() {\n  setIsTimerRunning((prevState) => {\n    const nextState = !prevState;\n    if (nextState) {\n      setSession({\n        ...session,\n            label: \"Focusing\",\n            timeRemaining: session.focusDuration * 60,\n          }\n      );\n    }\n    return nextState;\n  });\n}\n\n  const focusMinusClickHandler = () => setSession({...session, focusDuration: Math.max(5, (session.focusDuration - 5))});\n  \n  const breakMinusClickHandler = () => setSession({...session, breakDuration: Math.max(1, (session.breakDuration - 1))});\n  \n  const focusPlusClickHandler = () => setSession({...session, focusDuration: Math.min(60, (session.focusDuration + 5))});\n  \n  const breakPlusClickHandler = () => setSession({...session, breakDuration: Math.min(15, (session.breakDuration + 1))});\n  \n  const stopClickHandler = () => {\n    setSession({...initialSession});\n    setIsTimerRunning(false);\n  }\n\n\n  \n\n  return (\n    <div>\n      <TimerAdjust isTimerRunning={isTimerRunning} session={session} playPause={playPause} focusMinusClickHandler={focusMinusClickHandler} breakMinusClickHandler={breakMinusClickHandler} focusPlusClickHandler={focusPlusClickHandler} breakPlusClickHandler={breakPlusClickHandler} stopClickHandler={stopClickHandler} />\n      <Countdown session={session} isTimerRunning={isTimerRunning} />\n    </div>\n  );\n}\n\n\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}