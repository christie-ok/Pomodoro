{"ast":null,"code":"var _jsxFileName = \"/Users/christie_okeefe/Thinkful/pomodoro/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration/index.js\";\nimport TimerAdjust from \"./TimerAdjust\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration.\n\n  let [focusDuration, setFocusDuration] = useState(25);\n  let [breakDuration, setBreakDuration] = useState(5);\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession({\n          label: \"Focusing\",\n          timeRemaining: focusDuration * 60\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  const focusMinusClickHandler = () => {\n    if (focusDuration > 5) setFocusDuration(focusDuration - 5);\n  };\n\n  const breakMinusClickHandler = () => {\n    if (breakDuration > 1) setBreakDuration(breakDuration - 1);\n  };\n\n  const focusPlusClickHandler = () => {\n    if (focusDuration < 60) setFocusDuration(focusDuration + 5);\n  };\n\n  const breakPlusClickHandler = () => {\n    if (breakDuration < 15) setBreakDuration(breakDuration + 1);\n  };\n\n  const stopClickHandler = () => {\n    setSession(null);\n    setIsTimerRunning(false);\n    setFocusDuration(25);\n    setBreakDuration(5);\n  };\n\n  const timerText = (session === null || session === void 0 ? void 0 : session.label) === \"Focusing\" ? focusDuration : breakDuration;\n\n  const progressBar = secondsRemaining => {\n    if ((session === null || session === void 0 ? void 0 : session.label) === \"Focusing\") {\n      const secondsElapsed = focusDuration * 60 - secondsRemaining;\n      const percentFill = secondsElapsed / focusDuration;\n      return percentFill;\n    }\n\n    const secondsElapsed = breakDuration * 60 - secondsRemaining;\n    const percentFill = secondsElapsed / breakDuration;\n    return percentFill;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TimerAdjust, {\n    isTimerRunning: isTimerRunning,\n    session: session,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    playPause: playPause,\n    focusMinusClickHandler: focusMinusClickHandler,\n    breakMinusClickHandler: breakMinusClickHandler,\n    focusPlusClickHandler: focusPlusClickHandler,\n    breakPlusClickHandler: breakPlusClickHandler,\n    stopClickHandler: stopClickHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    hidden: !session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, session === null || session === void 0 ? void 0 : session.label, \" for \", timerText, \":00 minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, secondsToDuration(session === null || session === void 0 ? void 0 : session.timeRemaining), \" remaining\"), /*#__PURE__*/React.createElement(\"p\", {\n    hidden: !(session && !isTimerRunning),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, \"PAUSED\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": progressBar(session === null || session === void 0 ? void 0 : session.timeRemaining) // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${progressBar(session === null || session === void 0 ? void 0 : session.timeRemaining)}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 15\n    }\n  }))))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/christie_okeefe/Thinkful/pomodoro/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","secondsToDuration","minutesToDuration","TimerAdjust","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","Audio","play","playPause","nextState","focusMinusClickHandler","breakMinusClickHandler","focusPlusClickHandler","breakPlusClickHandler","stopClickHandler","timerText","progressBar","secondsRemaining","secondsElapsed","percentFill","height","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,SAAQC,iBAAR,EAA2BC,iBAA3B,QAAmD,4BAAnD;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAC3B,QAAMC,aAAa,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,SAAS,CAACC,aAAV,GAA0B,CAAtC,CAAtB;AACA,SAAO,EACL,GAAGD,SADE;AAELC,IAAAA;AAFK,GAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,WAAT,CAAqBC,aAArB,EAAoCC,aAApC,EAAmD;AACjD;AACF;AACA;AACE,SAAQC,cAAD,IAAoB;AACzB,QAAIA,cAAc,CAACC,KAAf,KAAyB,UAA7B,EAAyC;AACvC,aAAO;AACLA,QAAAA,KAAK,EAAE,UADF;AAELP,QAAAA,aAAa,EAAEK,aAAa,GAAG;AAF1B,OAAP;AAID;;AACD,WAAO;AACLE,MAAAA,KAAK,EAAE,UADF;AAELP,MAAAA,aAAa,EAAEI,aAAa,GAAG;AAF1B,KAAP;AAID,GAXD;AAYD;;AAED,SAASI,QAAT,GAAoB;AAClB;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsClB,QAAQ,CAAC,KAAD,CAApD,CAFkB,CAGlB;;AACA,QAAM,CAACmB,OAAD,EAAUC,UAAV,IAAwBpB,QAAQ,CAAC,IAAD,CAAtC,CAJkB,CAMhB;;AAEF,MAAI,CAACY,aAAD,EAAgBS,gBAAhB,IAAoCrB,QAAQ,CAAC,EAAD,CAAhD;AACA,MAAI,CAACa,aAAD,EAAgBS,gBAAhB,IAAoCtB,QAAQ,CAAC,CAAD,CAAhD;AAEA;AACF;AACA;AACA;AACA;;AACGE,EAAAA,WAAW,CAAC,MAAM;AACjB,QAAIiB,OAAO,CAACX,aAAR,KAA0B,CAA9B,EAAiC;AAC/B,UAAIe,KAAJ,CAAU,8CAAV,EAA0DC,IAA1D;AACA,aAAOJ,UAAU,CAACT,WAAW,CAACC,aAAD,EAAgBC,aAAhB,CAAZ,CAAjB;AACD;;AACD,WAAOO,UAAU,CAACd,QAAD,CAAjB;AACD,GANW,EAOZW,cAAc,GAAG,IAAH,GAAU,IAPZ,CAAX;AAUH;AACA;AACA;;AACA,WAASQ,SAAT,GAAqB;AACnBP,IAAAA,iBAAiB,CAAEX,SAAD,IAAe;AAC/B,YAAMmB,SAAS,GAAG,CAACnB,SAAnB;;AACA,UAAImB,SAAJ,EAAe;AACbN,QAAAA,UAAU,CAAC;AACLL,UAAAA,KAAK,EAAE,UADF;AAELP,UAAAA,aAAa,EAAEI,aAAa,GAAG;AAF1B,SAAD,CAAV;AAKD;;AACD,aAAOc,SAAP;AACD,KAVgB,CAAjB;AAWD;;AAEC,QAAMC,sBAAsB,GAAG,MAAM;AACnC,QAAIf,aAAa,GAAG,CAApB,EAAuBS,gBAAgB,CAACT,aAAa,GAAG,CAAjB,CAAhB;AACtB,GAFH;;AAIE,QAAMgB,sBAAsB,GAAG,MAAM;AACrC,QAAIf,aAAa,GAAG,CAApB,EAAuBS,gBAAgB,CAACT,aAAa,GAAG,CAAjB,CAAhB;AACxB,GAFC;;AAIF,QAAMgB,qBAAqB,GAAG,MAAM;AAClC,QAAIjB,aAAa,GAAG,EAApB,EAAwBS,gBAAgB,CAACT,aAAa,GAAC,CAAf,CAAhB;AACzB,GAFD;;AAIA,QAAMkB,qBAAqB,GAAG,MAAM;AAClC,QAAIjB,aAAa,GAAG,EAApB,EAAwBS,gBAAgB,CAACT,aAAa,GAAG,CAAjB,CAAhB;AACzB,GAFD;;AAIC,QAAMkB,gBAAgB,GAAG,MAAM;AAC9BX,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAG,IAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACAC,IAAAA,gBAAgB,CAAC,CAAD,CAAhB;AACD,GALA;;AAOD,QAAMU,SAAS,GAAI,CAAAb,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEJ,KAAT,MAAmB,UAApB,GAAkCH,aAAlC,GAAkDC,aAApE;;AAEA,QAAMoB,WAAW,GAAIC,gBAAD,IAAsB;AACxC,QAAI,CAAAf,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEJ,KAAT,MAAmB,UAAvB,EAAmC;AACjC,YAAMoB,cAAc,GAAGvB,aAAa,GAAC,EAAd,GAAmBsB,gBAA1C;AACA,YAAME,WAAW,GAAGD,cAAc,GAACvB,aAAnC;AACA,aAAOwB,WAAP;AACD;;AACA,UAAMD,cAAc,GAAGtB,aAAa,GAAC,EAAd,GAAiBqB,gBAAxC;AACA,UAAME,WAAW,GAAGD,cAAc,GAACtB,aAAnC;AACA,WAAOuB,WAAP;AACF,GATD;;AAWA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAa,IAAA,cAAc,EAAEnB,cAA7B;AAA6C,IAAA,OAAO,EAAEE,OAAtD;AAA+D,IAAA,aAAa,EAAEP,aAA9E;AAA6F,IAAA,aAAa,EAAEC,aAA5G;AAA2H,IAAA,SAAS,EAAEY,SAAtI;AAAiJ,IAAA,sBAAsB,EAAEE,sBAAzK;AAAiM,IAAA,sBAAsB,EAAEC,sBAAzN;AAAiP,IAAA,qBAAqB,EAAEC,qBAAxQ;AAA+R,IAAA,qBAAqB,EAAEC,qBAAtT;AAA6U,IAAA,gBAAgB,EAAEC,gBAA/V;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAK,IAAA,MAAM,EAAE,CAACZ,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,OADH,aACGA,OADH,uBACGA,OAAO,CAAEJ,KADZ,WACwBiB,SADxB,gBAFF,eAME;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG7B,iBAAiB,CAACgB,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEX,aAAV,CADpB,eANF,eASE;AAAG,IAAA,MAAM,EAAE,EAAEW,OAAO,IAAI,CAACF,cAAd,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,CADF,CAFF,eAeE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEoB,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAgBJ,WAAW,CAACd,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEX,aAAV,CAL7B,CAKuD;AALvD;AAME,IAAA,KAAK,EAAE;AAAE8B,MAAAA,KAAK,EAAG,GAAEL,WAAW,CAACd,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEX,aAAV,CAAyB;AAAhD,KANT,CAM+D;AAN/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAfF,CAFF,CADF;AAmCD;;AAID,eAAeQ,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport {secondsToDuration, minutesToDuration} from \"../utils/duration/index.js\"\nimport TimerAdjust from \"./TimerAdjust\"\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n    // ToDo: Allow the user to adjust the focus and break duration.\n\n  let [focusDuration, setFocusDuration] = useState(25);\n  let [breakDuration, setBreakDuration] = useState(5);\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n   useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n    return setSession(nextTick);\n  },\n  isTimerRunning ? 1000 : null\n);\n\n/**\n * Called whenever the play/pause button is clicked.\n */\nfunction playPause() {\n  setIsTimerRunning((prevState) => {\n    const nextState = !prevState;\n    if (nextState) {\n      setSession({\n            label: \"Focusing\",\n            timeRemaining: focusDuration * 60,\n          }\n      );\n    }\n    return nextState;\n  });\n}\n\n  const focusMinusClickHandler = () => {\n    if (focusDuration > 5) setFocusDuration(focusDuration - 5)\n    }\n  \n    const breakMinusClickHandler = () => {\n    if (breakDuration > 1) setBreakDuration(breakDuration - 1);\n  }\n  \n  const focusPlusClickHandler = () => {\n    if (focusDuration < 60) setFocusDuration(focusDuration+5);\n  }\n  \n  const breakPlusClickHandler = () => {\n    if (breakDuration < 15) setBreakDuration(breakDuration + 1);\n  }\n  \n   const stopClickHandler = () => {\n    setSession(null);\n    setIsTimerRunning(false);\n    setFocusDuration(25);\n    setBreakDuration(5);\n  }\n\n  const timerText = (session?.label === \"Focusing\") ? focusDuration : breakDuration;\n\n  const progressBar = (secondsRemaining) => {\n    if (session?.label === \"Focusing\") {\n      const secondsElapsed = focusDuration*60 - secondsRemaining;\n      const percentFill = secondsElapsed/focusDuration\n      return percentFill;\n    }\n     const secondsElapsed = breakDuration*60-secondsRemaining;\n     const percentFill = secondsElapsed/breakDuration;\n     return percentFill;\n  }\n\n  return (\n    <div>\n      <TimerAdjust isTimerRunning={isTimerRunning} session={session} focusDuration={focusDuration} breakDuration={breakDuration} playPause={playPause} focusMinusClickHandler={focusMinusClickHandler} breakMinusClickHandler={breakMinusClickHandler} focusPlusClickHandler={focusPlusClickHandler} breakPlusClickHandler={breakPlusClickHandler} stopClickHandler={stopClickHandler} />\n      <div hidden={!session}>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n              {session?.label} for {timerText}:00 minutes\n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(session?.timeRemaining)} remaining\n            </p>\n            <p hidden={!(session && !isTimerRunning)}>PAUSED</p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow= {progressBar(session?.timeRemaining)} // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${progressBar(session?.timeRemaining)}%` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}