{"ast":null,"code":"var _jsxFileName = \"/Users/christie_okeefe/Thinkful/pomodoro/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport TimerAdjust from \"./TimerAdjust\";\nimport Countdown from \"./Countdown\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  const initialSession = {\n    label: null,\n    timeRemaining: null,\n    focusDuration: 25,\n    breakDuration: 5\n  }; // Timer starts out paused\n\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState({ ...initialSession\n  }); // ToDo: Allow the user to adjust the focus and break duration.\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(session.focusDuration, session.breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession({ ...session,\n          label: \"Focusing\",\n          timeRemaining: session.focusDuration * 60\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  const focusMinusClickHandler = () => setSession({ ...session,\n    focusDuration: Math.max(5, session.focusDuration - 5)\n  });\n\n  const breakMinusClickHandler = () => setSession({ ...session,\n    breakDuration: Math.max(1, session.breakDuration - 1)\n  });\n\n  const focusPlusClickHandler = () => setSession({ ...session,\n    focusDuration: Math.min(60, session.focusDuration + 5)\n  });\n\n  const breakPlusClickHandler = () => setSession({ ...session,\n    breakDuration: Math.min(15, session.breakDuration + 1)\n  });\n\n  const stopClickHandler = () => {\n    setSession({ ...initialSession\n    });\n    setIsTimerRunning(false);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TimerAdjust, {\n    isTimerRunning: isTimerRunning,\n    session: session,\n    playPause: playPause,\n    focusMinusClickHandler: focusMinusClickHandler,\n    breakMinusClickHandler: breakMinusClickHandler,\n    focusPlusClickHandler: focusPlusClickHandler,\n    breakPlusClickHandler: breakPlusClickHandler,\n    stopClickHandler: stopClickHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Countdown, {\n    session: session,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/christie_okeefe/Thinkful/pomodoro/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","TimerAdjust","Countdown","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","initialSession","isTimerRunning","setIsTimerRunning","session","setSession","Audio","play","playPause","nextState","focusMinusClickHandler","breakMinusClickHandler","focusPlusClickHandler","min","breakPlusClickHandler","stopClickHandler"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport TimerAdjust from \"./TimerAdjust\"\nimport Countdown from \"./Countdown\"\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n\n  const initialSession = {\n    label: null,\n    timeRemaining: null,\n    focusDuration: 25,\n    breakDuration: 5,\n  };\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState({...initialSession});\n\n    // ToDo: Allow the user to adjust the focus and break duration.\n\n  \n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n   useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(session.focusDuration, session.breakDuration));\n    }\n    return setSession(nextTick);\n  },\n  isTimerRunning ? 1000 : null\n);\n\n/**\n * Called whenever the play/pause button is clicked.\n */\nfunction playPause() {\n  setIsTimerRunning((prevState) => {\n    const nextState = !prevState;\n    if (nextState) {\n      setSession({\n        ...session,\n            label: \"Focusing\",\n            timeRemaining: session.focusDuration * 60,\n          }\n      );\n    }\n    return nextState;\n  });\n}\n\n  const focusMinusClickHandler = () => setSession({...session, focusDuration: Math.max(5, (session.focusDuration - 5))});\n  \n  const breakMinusClickHandler = () => setSession({...session, breakDuration: Math.max(1, (session.breakDuration - 1))});\n  \n  const focusPlusClickHandler = () => setSession({...session, focusDuration: Math.min(60, (session.focusDuration + 5))});\n  \n  const breakPlusClickHandler = () => setSession({...session, breakDuration: Math.min(15, (session.breakDuration + 1))});\n  \n   const stopClickHandler = () => {\n    setSession({...initialSession});\n    setIsTimerRunning(false);\n  }\n\n\n  \n\n  return (\n    <>\n      <TimerAdjust isTimerRunning={isTimerRunning} session={session} playPause={playPause} focusMinusClickHandler={focusMinusClickHandler} breakMinusClickHandler={breakMinusClickHandler} focusPlusClickHandler={focusPlusClickHandler} breakPlusClickHandler={breakPlusClickHandler} stopClickHandler={stopClickHandler} />\n      <Countdown session={session} isTimerRunning={isTimerRunning} />\n    </>\n  );\n}\n\n\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}