{"ast":null,"code":"var _jsxFileName = \"/Users/christie_okeefe/Thinkful/pomodoro/src/pomodoro/Countdown.js\";\nimport React from \"react\";\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration/index.js\";\nimport SessionTitles from \"./SessionTitles\";\nimport PropTypes from 'prop-types';\n\nfunction Countdown({\n  session,\n  isTimerRunning\n}) {\n  const timerText = session.label === null ? null : session.label === \"Focusing\" ? session.focusDuration : session.breakDuration;\n\n  const progressBar = secondsRemaining => {\n    if (session.label === \"Focusing\") {\n      const secondsElapsed = session.focusDuration * 60 - secondsRemaining;\n      const percentFill = secondsElapsed / (session.focusDuration * 60);\n      return percentFill * 100;\n    }\n\n    const secondsElapsed = session.breakDuration * 60 - secondsRemaining;\n    const percentFill = secondsElapsed / (session.breakDuration * 60);\n    return percentFill * 100;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    hidden: !session.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SessionTitles, {\n    session: session,\n    timerText: timerText,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": progressBar(session.timeRemaining) // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${progressBar(session.timeRemaining)}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 15\n    }\n  })))));\n}\n\nCountdown.propTypes = {\n  session: PropTypes.object,\n  isTimerRunning: PropTypes.bool\n};\nexport default Countdown;","map":{"version":3,"sources":["/Users/christie_okeefe/Thinkful/pomodoro/src/pomodoro/Countdown.js"],"names":["React","secondsToDuration","minutesToDuration","SessionTitles","PropTypes","Countdown","session","isTimerRunning","timerText","label","focusDuration","breakDuration","progressBar","secondsRemaining","secondsElapsed","percentFill","height","timeRemaining","width","propTypes","object","bool"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,iBAAR,EAA2BC,iBAA3B,QAAmD,4BAAnD;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,SAAT,CAAmB;AAACC,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAnB,EAA8C;AAE1C,QAAMC,SAAS,GAAIF,OAAO,CAACG,KAAR,KAAkB,IAAnB,GAA2B,IAA3B,GAAmCH,OAAO,CAACG,KAAR,KAAkB,UAAnB,GAAiCH,OAAO,CAACI,aAAzC,GAAyDJ,OAAO,CAACK,aAArH;;AAEA,QAAMC,WAAW,GAAIC,gBAAD,IAAsB;AACtC,QAAIP,OAAO,CAACG,KAAR,KAAkB,UAAtB,EAAkC;AAChC,YAAMK,cAAc,GAAGR,OAAO,CAACI,aAAR,GAAsB,EAAtB,GAA2BG,gBAAlD;AACA,YAAME,WAAW,GAAGD,cAAc,IAAER,OAAO,CAACI,aAAR,GAAsB,EAAxB,CAAlC;AACA,aAAOK,WAAW,GAAC,GAAnB;AACD;;AACA,UAAMD,cAAc,GAAGR,OAAO,CAACK,aAAR,GAAsB,EAAtB,GAAyBE,gBAAhD;AACA,UAAME,WAAW,GAAGD,cAAc,IAAER,OAAO,CAACK,aAAR,GAAsB,EAAxB,CAAlC;AACA,WAAOI,WAAW,GAAC,GAAnB;AACF,GATH;;AAWA,sBACA;AAAK,IAAA,MAAM,EAAE,CAACT,OAAO,CAACG,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAe,IAAA,OAAO,EAAEH,OAAxB;AAAiC,IAAA,SAAS,EAAEE,SAA5C;AAAuD,IAAA,cAAc,EAAED,cAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,eAKI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAES,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAgBJ,WAAW,CAACN,OAAO,CAACW,aAAT,CAL7B,CAKsD;AALtD;AAME,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAG,GAAEN,WAAW,CAACN,OAAO,CAACW,aAAT,CAAwB;AAA/C,KANT,CAM8D;AAN9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CALJ,CADA;AAsBH;;AAEDZ,SAAS,CAACc,SAAV,GAAsB;AACpBb,EAAAA,OAAO,EAAEF,SAAS,CAACgB,MADC;AAEpBb,EAAAA,cAAc,EAAEH,SAAS,CAACiB;AAFN,CAAtB;AAKA,eAAehB,SAAf","sourcesContent":["import React from \"react\";\nimport {secondsToDuration, minutesToDuration} from \"../utils/duration/index.js\"\nimport SessionTitles from \"./SessionTitles\";\nimport PropTypes from 'prop-types';\n\nfunction Countdown({session, isTimerRunning}) {\n\n    const timerText = (session.label === null) ? null : (session.label === \"Focusing\") ? session.focusDuration : session.breakDuration;\n\n    const progressBar = (secondsRemaining) => {\n        if (session.label === \"Focusing\") {\n          const secondsElapsed = session.focusDuration*60 - secondsRemaining;\n          const percentFill = secondsElapsed/(session.focusDuration*60)\n          return percentFill*100;\n        }\n         const secondsElapsed = session.breakDuration*60-secondsRemaining;\n         const percentFill = secondsElapsed/(session.breakDuration*60);\n         return percentFill*100;\n      }\n\n    return (\n    <div hidden={!session.label}>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <SessionTitles session={session} timerText={timerText} isTimerRunning={isTimerRunning} />\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow= {progressBar(session.timeRemaining)} // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${progressBar(session.timeRemaining)}%` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n}\n\nCountdown.propTypes = {\n  session: PropTypes.object,\n  isTimerRunning: PropTypes.bool,\n}\n\nexport default Countdown;"]},"metadata":{},"sourceType":"module"}