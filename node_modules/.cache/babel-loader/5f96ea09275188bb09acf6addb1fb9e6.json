{"ast":null,"code":"import _slicedToArray from\"/Users/christie_okeefe/Thinkful/pomodoro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/christie_okeefe/Thinkful/pomodoro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{useState}from\"react\";import useInterval from\"../utils/useInterval\";import TimerAdjust from\"./TimerAdjust\";import Countdown from\"./Countdown\";// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */function nextTick(prevState){var timeRemaining=Math.max(0,prevState.timeRemaining-1);return _objectSpread(_objectSpread({},prevState),{},{timeRemaining:timeRemaining});}/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */function nextSession(session){/**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */return function(currentSession){if(currentSession.label===\"Focusing\"){return _objectSpread(_objectSpread({},session),{},{label:\"On Break\",timeRemaining:session.breakDuration*60});}return _objectSpread(_objectSpread({},session),{},{label:\"Focusing\",timeRemaining:session.focusDuration*60});};}function Pomodoro(){var initialSession={label:null,timeRemaining:null,focusDuration:25,breakDuration:5};// Timer starts out paused\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),isTimerRunning=_useState2[0],setIsTimerRunning=_useState2[1];// The current session - null where there is no session running\nvar _useState3=useState(_objectSpread({},initialSession)),_useState4=_slicedToArray(_useState3,2),session=_useState4[0],setSession=_useState4[1];// ToDo: Allow the user to adjust the focus and break duration.\n/**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */useInterval(function(){if(session.timeRemaining===0){new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();return setSession(nextSession(session));}return setSession(nextTick);},isTimerRunning?1000:null);/**\n * Called whenever the play/pause button is clicked.\n */function playPause(){setIsTimerRunning(function(prevState){var nextState=!prevState;if(nextState){setSession(_objectSpread(_objectSpread({},session),{},{label:\"Focusing\",timeRemaining:session.focusDuration*60}));}return nextState;});}var focusMinusClickHandler=function focusMinusClickHandler(){return setSession(_objectSpread(_objectSpread({},session),{},{focusDuration:Math.max(5,session.focusDuration-5)}));};var breakMinusClickHandler=function breakMinusClickHandler(){return setSession(_objectSpread(_objectSpread({},session),{},{breakDuration:Math.max(1,session.breakDuration-1)}));};var focusPlusClickHandler=function focusPlusClickHandler(){return setSession(_objectSpread(_objectSpread({},session),{},{focusDuration:Math.min(60,session.focusDuration+5)}));};var breakPlusClickHandler=function breakPlusClickHandler(){return setSession(_objectSpread(_objectSpread({},session),{},{breakDuration:Math.min(15,session.breakDuration+1)}));};var stopClickHandler=function stopClickHandler(){setSession(_objectSpread({},initialSession));setIsTimerRunning(false);};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(TimerAdjust,{isTimerRunning:isTimerRunning,session:session,playPause:playPause,focusMinusClickHandler:focusMinusClickHandler,breakMinusClickHandler:breakMinusClickHandler,focusPlusClickHandler:focusPlusClickHandler,breakPlusClickHandler:breakPlusClickHandler,stopClickHandler:stopClickHandler}),/*#__PURE__*/React.createElement(Countdown,{session:session,isTimerRunning:isTimerRunning}));}export default Pomodoro;","map":{"version":3,"sources":["/Users/christie_okeefe/Thinkful/pomodoro/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","TimerAdjust","Countdown","nextTick","prevState","timeRemaining","Math","max","nextSession","session","currentSession","label","breakDuration","focusDuration","Pomodoro","initialSession","isTimerRunning","setIsTimerRunning","setSession","Audio","play","playPause","nextState","focusMinusClickHandler","breakMinusClickHandler","focusPlusClickHandler","min","breakPlusClickHandler","stopClickHandler"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport TimerAdjust from \"./TimerAdjust\"\nimport Countdown from \"./Countdown\"\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(session) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        ...session,\n        label: \"On Break\",\n        timeRemaining: session.breakDuration * 60,\n      };\n    }\n    return {\n      ...session,\n      label: \"Focusing\",\n      timeRemaining: session.focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n\n  const initialSession = {\n    label: null,\n    timeRemaining: null,\n    focusDuration: 25,\n    breakDuration: 5,\n  };\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState({...initialSession});\n\n    // ToDo: Allow the user to adjust the focus and break duration.\n\n  \n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n   useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(session));\n    }\n    return setSession(nextTick);\n  },\n  isTimerRunning ? 1000 : null\n);\n\n/**\n * Called whenever the play/pause button is clicked.\n */\nfunction playPause() {\n  setIsTimerRunning((prevState) => {\n    const nextState = !prevState;\n    if (nextState) {\n      setSession({\n        ...session,\n            label: \"Focusing\",\n            timeRemaining: session.focusDuration * 60,\n          }\n      );\n    }\n    return nextState;\n  });\n}\n\n  const focusMinusClickHandler = () => setSession({...session, focusDuration: Math.max(5, (session.focusDuration - 5))});\n  \n  const breakMinusClickHandler = () => setSession({...session, breakDuration: Math.max(1, (session.breakDuration - 1))});\n  \n  const focusPlusClickHandler = () => setSession({...session, focusDuration: Math.min(60, (session.focusDuration + 5))});\n  \n  const breakPlusClickHandler = () => setSession({...session, breakDuration: Math.min(15, (session.breakDuration + 1))});\n  \n  const stopClickHandler = () => {\n    setSession({...initialSession});\n    setIsTimerRunning(false);\n  }\n\n\n  \n\n  return (\n    <div>\n      <TimerAdjust isTimerRunning={isTimerRunning} session={session} playPause={playPause} focusMinusClickHandler={focusMinusClickHandler} breakMinusClickHandler={breakMinusClickHandler} focusPlusClickHandler={focusPlusClickHandler} breakPlusClickHandler={breakPlusClickHandler} stopClickHandler={stopClickHandler} />\n      <Countdown session={session} isTimerRunning={isTimerRunning} />\n    </div>\n  );\n}\n\n\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}