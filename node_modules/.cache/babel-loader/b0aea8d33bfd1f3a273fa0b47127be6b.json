{"ast":null,"code":"var _jsxFileName = \"/Users/christie_okeefe/Thinkful/pomodoro/src/pomodoro/Countdown.js\";\nimport React from \"react\";\nimport { secondsToDuration } from \"../utils/duration/index.js\";\nimport PropTypes from 'prop-types';\n\nfunction Countdown({\n  session,\n  isTimerRunning\n}) {\n  const timerText = (session === null || session === void 0 ? void 0 : session.label) === \"Focusing\" ? session.focusDuration : session.breakDuration;\n\n  const progressBar = secondsRemaining => {\n    if (session.label === \"Focusing\") {\n      const secondsElapsed = session.focusDuration * 60 - secondsRemaining;\n      const percentFill = secondsElapsed / (session.focusDuration * 60);\n      console.log(percentFill);\n      return percentFill;\n    }\n\n    const secondsElapsed = session.breakDuration * 60 - secondsRemaining;\n    const percentFill = secondsElapsed / (session.breakDuration * 60);\n    return percentFill;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    hidden: !session.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, session === null || session === void 0 ? void 0 : session.label, \" for \", timerText, \":00 minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, secondsToDuration(session.timeRemaining), \" remaining\"), /*#__PURE__*/React.createElement(\"p\", {\n    hidden: !(session && !isTimerRunning),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, \"PAUSED\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": progressBar(session.timeRemaining) // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${progressBar(session.timeRemaining)}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 15\n    }\n  })))));\n}\n\nCountdown.propTypes = {\n  session: PropTypes.object,\n  isTimerRunning: PropTypes.bool\n};\nexport default Countdown;","map":{"version":3,"sources":["/Users/christie_okeefe/Thinkful/pomodoro/src/pomodoro/Countdown.js"],"names":["React","secondsToDuration","PropTypes","Countdown","session","isTimerRunning","timerText","label","focusDuration","breakDuration","progressBar","secondsRemaining","secondsElapsed","percentFill","console","log","timeRemaining","height","width","propTypes","object","bool"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {secondsToDuration} from \"../utils/duration/index.js\"\nimport PropTypes from 'prop-types';\n\nfunction Countdown({session, isTimerRunning}) {\n\n    const timerText = (session?.label === \"Focusing\") ? session.focusDuration : session.breakDuration;\n\n    const progressBar = (secondsRemaining) => {\n        if (session.label === \"Focusing\") {\n          const secondsElapsed = session.focusDuration*60 - secondsRemaining;\n          const percentFill = secondsElapsed/(session.focusDuration*60)\n          console.log(percentFill)\n          return percentFill;\n        }\n         const secondsElapsed = session.breakDuration*60-secondsRemaining;\n         const percentFill = secondsElapsed/(session.breakDuration*60);\n         return percentFill;\n      }\n\n    return (\n    <div hidden={!session.label}>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n              {session?.label} for {timerText}:00 minutes\n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(session.timeRemaining)} remaining\n            </p>\n            <p hidden={!(session && !isTimerRunning)}>PAUSED</p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow= {progressBar(session.timeRemaining)} // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${progressBar(session.timeRemaining)}%` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n}\n\nCountdown.propTypes = {\n  session: PropTypes.object,\n  isTimerRunning: PropTypes.bool,\n}\n\nexport default Countdown;"]},"metadata":{},"sourceType":"module"}